{"version":3,"sources":["actions/config.js","components/PersonalityFilter.js","actions/index.js","components/PersonalityList.js","actions/displayOptions.js","components/DisplayOptions.js","reducers/config.js","reducers/displayOptions.js","reducers/index.js","index.js","components/App.js"],"names":["sortByCognitiveFunction","cognitiveFunction","type","filterByPersonalitySystem","system","filterPersonalities","filter","connect","state","config","dispatch","configActions","bindActionCreators","_Component","MyComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterInput","React","createRef","isOpen","inherits","createClass","key","value","nextProps","current","synchronizeFilter","closeDropdown","screenTypeFilter","systemMap","getPersonalitySystems","forEach","_ref","_ref2","slicedToArray","systemId","systemLabel","typeFilterInput","processTypeFilter","typeFilter","newTypeFilter","toUpperCase","replace","letters","lettersUsed","j","length","letter","i","typeLetter","counterLetter","indexOf","typeFilters","split","newTypeFilters","push","join","toggle","setState","toggleDropdown","focus","_this2","personalitySystem","personalitySystemLabel","getPersonalitySystemLabel","react_default","a","createElement","className","onClick","openDropdown","bind","map","_ref3","_ref4","href","selectPersonalitySystem","id","ref","onKeyUp","Component","nextTodoId","addTodo","text","setVisibilityFilter","toggleTodo","VisibilityFilters","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","types","INTP","ISTP","ESTP","ESFP","ISFP","INFP","ENFP","ENTP","ENTJ","ESTJ","ISTJ","ISFJ","ESFJ","ENFJ","INFJ","INTJ","socionicsMap","cognitiveFunctionNames","Ti","Ne","Si","Fe","Te","Ni","Se","Fi","mbtiToSocionics","MbtiTypes","getTypesData","assign","getTypeData","compareTypesByCognitiveFunctions","sortFilter","type1","type2","getSortedRankByCognitiveFunctions","typeCognitiveFunctions","result","sortPriorityIndex","cognitiveFunctionToSortBy","cognitiveFunctionToSortByWeight","Math","pow","typeCognitiveFunctionIndex","typeCognitiveFunction","typeCognitiveFunctionWeight","getSortedTypesByCognitiveFunctions","self","keys","sort","b","displayOptions","actions","sortedMbtiTypes","JSON","stringify","isToggled","typeToMatch","typeFilterLetter","cognitiveFunctions","socionicsName","socionicsFormalName","_this$props","features","includes","src","cognitiveFunctionIndex","socionicsFunction","cognitiveFunctionName","classnames","sortPriority1","title","getTemperamentHtml","mbtiType","temperament","temperamentsData","language","display","headers","SP","SJ","NF","NT","intellect","interest","orientation","self-image","social-role","section","sectionData","sectionHeaders","temperamentData","index","getSectionHtml","_this3","getTypeContainerHtml","showFeatures","displayOptionsActions","options","featureRef","featureId","checked","featureLabel","onChange","defaultChecked","originalState","combineReducers","arguments","undefined","action","console","log","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","logger","render","es","DisplayOptions","PersonalityFilter","PersonalityList","document","getElementById"],"mappings":"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","file":"static/js/main.69fc7bf7.chunk.js","sourcesContent":["\nexport const sortByCognitiveFunction = cognitiveFunction => ({\n    type: 'SORT_BY_COGNITIVE_FUNCTION',\n    cognitiveFunction,\n});\n\nexport const filterByPersonalitySystem = system => ({\n    type: 'FILTER_BY_PERSONALITY_SYSTEM',\n    system,\n});\n\nexport const filterPersonalities = filter => ({\n    type: 'FILTER_PERSONALITIES',\n    filter,\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators, compose } from 'redux';\nimport { connect } from 'react-redux';\nimport * as configActions from '../actions/config';\nimport listensToClickOutside from 'react-onclickoutside';\nimport onClickOutside from \"react-onclickoutside\";\n\nexport default connect(state => ({\n    config: state.config,\n}), dispatch => ({\n    configActions: bindActionCreators(configActions, dispatch),\n}))(class MyComponent extends Component {\n    static propTypes = {\n        configActions: PropTypes.object.isRequired,\n        config: PropTypes.object.isRequired,\n    }\n    \n    constructor(props) {\n        super(props);\n        \n        this.filterInput = React.createRef();\n        \n        \n        this.state = {\n            isOpen: false,\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.config.filter !== this.props.config.filter) {\n            this.filterInput.current.value = nextProps.config.filter;\n        }\n        if (nextProps.config.filterByPersonalitySystem !== this.props.config.filterByPersonalitySystem) {\n            this.synchronizeFilter(nextProps.config.filterByPersonalitySystem);\n        }\n    }\n\n    /**\n     * listensToClickOutside decorator function for clicking outside of this component\n     * @param  {object} event Click event outside of component\n     */\n    handleClickOutside() {\n        this.closeDropdown();\n    }\n    \n    synchronizeFilter(filterByPersonalitySystem) {\n        let filter = this.screenTypeFilter(this.filterInput.current.value, filterByPersonalitySystem);\n        this.props.configActions.filterPersonalities(filter);\n        this.filterInput.current.value = filter;\n    }\n    \n    getPersonalitySystems() {\n        return [\n            ['mbti', 'Myers Briggs'],\n            ['socionics', 'Socionics'],\n            ['socionics-formal', 'Socionics (Formal)'],\n        ];\n    }\n    \n    getPersonalitySystemLabel(system) {\n        let systemMap = {};\n        this.getPersonalitySystems().forEach(([systemId, systemLabel]) => {\n            systemMap[systemId] = systemLabel;\n        });\n        return systemMap[system];\n    }\n    \n    /**\n     * @param {String} typeFilterInput The type filter input attempting to become the updated type filter\n     * @param {String} filterByPersonalitySystem The personality system being used for the provided filter\n     * @return {String} The valid representation of the provided type filter input, screening out any invalid characters\n     */\n    screenTypeFilter(typeFilterInput, filterByPersonalitySystem) {\n        /**\n         * @param {String} typeFilter The type filter that toggles which MBTI types to show; for example \"IJ\", \"ES\", or \"INTJ\"\n         */\n        function processTypeFilter(typeFilter) {\n            var newTypeFilter = '';\n            \n            if (filterByPersonalitySystem == 'socionics-formal') {\n                newTypeFilter = typeFilter.toUpperCase().replace(/[^ISEL]/g, '');\n            }\n            else {\n                // Keep track of all letters used in the current type filter's input value\n                var letters = ['I', 'E', 'S', 'N', 'F', 'T', 'P', 'J'];\n                var lettersUsed = {};\n                for (var j = 0; j < letters.length; j++) {\n                    var letter = letters[j];\n                    lettersUsed[letter] = 0;\n                }\n                for (var i = 0; i < typeFilter.length; i++) {\n                    var typeLetter = typeFilter[i].toUpperCase();\n                    if (typeof lettersUsed[typeLetter] != 'undefined') {\n                        lettersUsed[typeLetter] += 1;\n                    }\n                }\n                \n                // Iterate through each of the MBTI letters and its counter (opposite letter -- such as \"N\" is opposite to \"S\", \"E\" is opposite to \"I\", etc.)\n                for (var i = 0; i < letters.length; i++) {\n                    var letter = letters[i],\n                        counterLetter = (i % 2 == 0 && typeof letters[i + 1] != 'undefined') ? letters[i + 1] : '';\n                    \n                    // If this letter has been used and its counter (opposite) letter is not present and this letter has not been added to the new type filter yet\n                    if (lettersUsed[letter] && !lettersUsed[counterLetter] && newTypeFilter.indexOf(letter) === -1) {\n                        // Add this letter to the resulting new type filter\n                        newTypeFilter += letter;\n                    }\n                }\n            }\n            \n            if (filterByPersonalitySystem == 'socionics') {\n                newTypeFilter = newTypeFilter.replace(/J/g, 'j').replace(/P/g, 'p');\n            }\n            \n            return newTypeFilter;\n        }\n        \n        // Iterate through all type filters in the comma-delimited string\n        var typeFilters = typeFilterInput.split(','),\n            newTypeFilters = [];\n        for (var i = 0; i < typeFilters.length; i++) {\n            newTypeFilters.push(processTypeFilter(typeFilters[i]));\n        }\n        \n        // Return the new input value of the type filter(s)\n        return newTypeFilters.join(',');\n    }\n    \n    toggleDropdown(toggle) {\n        this.setState({\n            isOpen: toggle,\n        });\n    }\n    \n    openDropdown() {\n        this.toggleDropdown(true);\n    }\n    \n    closeDropdown() {\n        this.toggleDropdown(false);\n    }\n    \n    selectPersonalitySystem(system) {\n        this.props.configActions.filterByPersonalitySystem(system);\n        this.closeDropdown();\n        this.filterInput.current.focus();\n    }\n  \n    render() {\n        const {\n            config,\n        } = this.props,\n            personalitySystem = config.filterByPersonalitySystem,\n            personalitySystemLabel = this.getPersonalitySystemLabel(personalitySystem);\n        \n        return (\n            <div className='mbti-app-toolbar'>\n                <form className=\"expanding-search-form\">\n                    <div className={'search-dropdown' + (this.state.isOpen ? ' open' : '')}>\n                        <button className=\"button dropdown-toggle\" type=\"button\" onClick={this.openDropdown.bind(this)}>\n                            <span className=\"toggle-active\">{personalitySystemLabel}</span>\n                            <span className=\"ion-arrow-down-b\"></span>\n                        </button>\n                        <ul className=\"dropdown-menu\">\n                            {this.getPersonalitySystems().map(([systemId, systemLabel]) => (\n                                <li key={systemId} className={systemId == personalitySystem ? 'menu-active' : ''}>\n                                    <a href=\"#\" onClick={() => this.selectPersonalitySystem(systemId)}>{systemLabel}</a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <input className=\"search-input\" id=\"global-search\" type=\"text\" ref={this.filterInput} onKeyUp={() => this.synchronizeFilter(personalitySystem)} />\n                </form>\n            </div>\n        )\n    }\n});","let nextTodoId = 0\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\nexport const setVisibilityFilter = filter => ({\n  type: 'SET_VISIBILITY_FILTER',\n  filter\n})\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\nexport const sortByCognitiveFunction = cognitiveFunction => ({\n    type: 'SORT_BY_COGNITIVE_FUNCTION',\n    cognitiveFunction,\n});\n\nexport const filterByPersonalitySystem = system => ({\n    type: 'FILTER_BY_PERSONALITY_SYSTEM',\n    system,\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators, compose } from 'redux';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport * as actions from '../actions/index';\n\n/**\n * All 16 MBTI personality types and their corresponding cognitive functions\n * in listed in descending-order pertaining to how strong each one is. Format:\n * <pre>{\n *  String: Array<String>, // The MBTI type => Each cognitive function listed in descending-order pertaining to how strong each one is\n *  ... // The remaining MBTI types\n * }</pre>\n * @var {Object<String,Array<String>>}\n */\nvar types = {\n    'INTP': ['Ti', 'Ne', 'Si', 'Fe', 'Te', 'Ni', 'Se', 'Fi'],\n    'ISTP': ['Ti', 'Se', 'Ni', 'Fe', 'Te', 'Si', 'Ne', 'Fi'],\n    'ESTP': ['Se', 'Ti', 'Fe', 'Ni', 'Si', 'Te', 'Fi', 'Ne'],\n    'ESFP': ['Se', 'Fi', 'Te', 'Ni', 'Si', 'Fe', 'Ti', 'Ne'],\n    'ISFP': ['Fi', 'Se', 'Ni', 'Te', 'Fe', 'Si', 'Ne', 'Ti'],\n    'INFP': ['Fi', 'Ne', 'Si', 'Te', 'Fe', 'Ni', 'Se', 'Ti'],\n    'ENFP': ['Ne', 'Fi', 'Te', 'Si', 'Ni', 'Fe', 'Ti', 'Se'],\n    'ENTP': ['Ne', 'Ti', 'Fe', 'Si', 'Ni', 'Te', 'Fi', 'Se'],\n    'ENTJ': ['Te', 'Ni', 'Se', 'Fi', 'Ti', 'Ne', 'Si', 'Fe'],\n    'ESTJ': ['Te', 'Si', 'Ne', 'Fi', 'Ti', 'Se', 'Ni', 'Fe'],\n    'ISTJ': ['Si', 'Te', 'Fi', 'Ne', 'Se', 'Ti', 'Fe', 'Ni'],\n    'ISFJ': ['Si', 'Fe', 'Ti', 'Ne', 'Se', 'Fi', 'Te', 'Ni'],\n    'ESFJ': ['Fe', 'Si', 'Ne', 'Ti', 'Fi', 'Se', 'Ni', 'Te'],\n    'ENFJ': ['Fe', 'Ni', 'Se', 'Ti', 'Fi', 'Ne', 'Si', 'Te'],\n    'INFJ': ['Ni', 'Fe', 'Ti', 'Se', 'Ne', 'Fi', 'Te', 'Si'],\n    'INTJ': ['Ni', 'Te', 'Fi', 'Se', 'Ne', 'Ti', 'Fe', 'Si']\n};\n\n/**\n * The MBTI types mapped to their corresponding Socionics type and Socionics formal name. Format:\n * <pre>{\n *  String: [ // The MTBI type\n *      String, // The Socionics type (4-letter acronymn)\n *      String, // The Socionics formal name (for example: LSE)\n *  ],\n *  ... // The remaining MTBI types\n * }</pre>\n * @var {Object<Array<String>>}\n */\nvar socionicsMap = {\n    'INTP': ['INTj', 'LII'],\n    'ISTP': ['ISTj', 'LSI'],\n    'ESTP': ['ESTp', 'SLE'],\n    'ESFP': ['ESFp', 'SEE'],\n    'ISFP': ['ISFj', 'ESI'],\n    'INFP': ['INFj', 'EII'],\n    'ENFP': ['ENFp', 'IEE'],\n    'ENTP': ['ENTp', 'ILE'],\n    'ENTJ': ['ENTj', 'LIE'],\n    'ESTJ': ['ESTj', 'LSE'],\n    'ISTJ': ['ISTp', 'SLI'],\n    'ISFJ': ['ISFp', 'SEI'],\n    'ESFJ': ['ESFj', 'ESE'],\n    'ENFJ': ['ENFj', 'EIE'],\n    'INFJ': ['INFp', 'IEI'],\n    'INTJ': ['INTp', 'ILI']\n};\n\nvar cognitiveFunctionNames = {\n    'Ti': 'Accuracy',\n    'Ne': 'Exploration',\n    'Si': 'Memory',\n    'Fe': 'Harmony',\n    'Te': 'Effectiveness',\n    'Ni': 'Perspectives',\n    'Se': 'Sensation',\n    'Fi': 'Authenticity'\n};\n\nvar mbtiToSocionics = {\n    'Te': 'Pragmatism',\n    'Ti': 'Laws',\n    'Ne': 'Ideas',\n    'Ni': 'Time',\n    'Fe': 'Emotions',\n    'Fi': 'Relations',\n    'Si': 'Senses',\n    'Se': 'Force'\n};\n\n/**\n * @var {Object}\n */\nvar MbtiTypes = {\n    /**\n     * @return {Object} Structured data concerning all the MBTI types. Format:\n     * <pre>{\n     *  String: Array<String>, // The MBTI type => Each cognitive function listed in descending-order pertaining to how strong each one is\n     *  ... // The remaining MBTI types\n     * }</pre>\n     */\n    getTypesData: function() {\n        return Object.assign({}, types);\n    },\n    \n    /**\n     * @param {String} type The MBTI type\n     * @return {Array<String>} The provided MBTI type's cognitive function listed in descending-order pertaining to how strong each one is\n     */\n    getTypeData: function(type) {\n        return this.getTypesData()[type];\n    },\n\n    /**\n     * @param {String} cognitiveFunction For example: 'Ne', 'Ni', 'Se', 'Te'\n     * @param {String} type1 The first type\n     * @param {String} type2 The second type\n     * @return {Number} The comparative ranking of cognitive functions between two types (0 when the rankings are equal, less than 0 when type1\n     * has a lower ranking than type2, greater than 0 when type1 has a higher ranking than type2)\n     */\n    compareTypesByCognitiveFunctions: function(sortFilter, type1, type2) {\n        return this.getSortedRankByCognitiveFunctions(sortFilter, type1) - this.getSortedRankByCognitiveFunctions(sortFilter, type2);\n    },\n    \n    /**\n     * @param {Array<String>} sortFilter The cognitive functions to sort MBTI types by where the first cognitive function\n     * described in the array has the highest sorting priority; for example: ['Ni', 'Te'] requests the sort rank of the provided\n     * MBTI type where the cognitive function 'Ni' is weighted more than 'Te', but in the event of a tie, the MBTI type with a higher\n     * rated rank of 'Te' will receive a higher sorted rank\n     * @param {String} type The MBTI type to get the sorted rank for\n     * @return {Integer} The sorted rank for the provided MBTI type using the provided cognitive functions to sort by. For example:\n     * <pre>\n     *  // The following boolean expressions evaluate to true\n     *  getSortedRankByCognitiveFunctions(['Ni'], 'INTJ') === getSortedRankByCognitiveFunctions(['Ni'], 'INFJ');\n     *  getSortedRankByCognitiveFunctions(['Ni', 'Te'], 'INTJ') > getSortedRankByCognitiveFunctions(['Ni', 'Te'], 'INFJ');\n     *  getSortedRankByCognitiveFunctions(['Ni', 'Fe'], 'INTJ') < getSortedRankByCognitiveFunctions(['Ni', 'Fe'], 'INFJ');\n     * </pre>\n     */\n    getSortedRankByCognitiveFunctions: function(sortFilter, type) {\n        var typeCognitiveFunctions = this.getTypeData(type),\n            result = 0;\n        \n        for (\n            var sortPriorityIndex = 0;\n            sortPriorityIndex < sortFilter.length;\n            sortPriorityIndex++\n        ) {\n            // NOTE: The weighting of this sort rank depends upon the consistency of the same number of cognitive functions\n            // in both the sort filter and each of the MBTI types (each MBTI type always has the same number of cognitive \n            // functions (8) and comparing sort ranks using different sort filters is meaningless).\n            var cognitiveFunctionToSortBy = sortFilter[sortPriorityIndex],\n                cognitiveFunctionToSortByWeight = Math.pow(typeCognitiveFunctions.length + 1, sortFilter.length - 1 - sortPriorityIndex);\n            \n            // Iterate through this type's cognitive functions in order of how strong they are\n            for (\n                var typeCognitiveFunctionIndex = 0;\n                typeCognitiveFunctionIndex < typeCognitiveFunctions.length;\n                typeCognitiveFunctionIndex++\n            ) {\n                // See note above regarding sort rank weighting\n                var typeCognitiveFunction = typeCognitiveFunctions[typeCognitiveFunctionIndex],\n                    typeCognitiveFunctionWeight = typeCognitiveFunctions.length - typeCognitiveFunctionIndex;\n                \n                // If the current cognitive function from the sort filter is found\n                if (typeCognitiveFunction === cognitiveFunctionToSortBy) {\n                    // Apply the appropriate weight to the resulting sort rank\n                    result += (cognitiveFunctionToSortByWeight * typeCognitiveFunctionWeight);\n                    \n                    // Discontinue search for this cognitive function once its been found\n                    break;\n                }\n            }\n        }\n        \n        return result;\n    },\n    \n    /**\n     * @param {Array<String>} sortFilter The cognitive functions to sort MBTI types by where the first cognitive function\n     * described in the array has the highest sorting priority; for example: ['Ni', 'Te'] sorts MBTI types where the cognitive\n     * function 'Ni' is weighted more than 'Te', but in the event of a tie, the MBTI type with a higher rated rank of 'Te' will\n     * receive a higher sorted rank\n     * @return {Array<String>} List of MBTI types sorted by the provided sort filter\n     */\n    getSortedTypesByCognitiveFunctions: function(sortFilter) {\n        var self = this;\n        return Object.keys(this.getTypesData()).sort(function(a, b) {\n            return self.getSortedRankByCognitiveFunctions(sortFilter, b) - self.getSortedRankByCognitiveFunctions(sortFilter, a);\n        });\n    }\n};\n\nexport default connect(state => ({\n    config: state.config,\n    displayOptions: state.displayOptions,\n}), dispatch => ({\n    actions: bindActionCreators(actions, dispatch),\n}))(class MyComponent extends Component {\n    static propTypes = {\n        actions: PropTypes.object.isRequired,\n        config: PropTypes.object.isRequired,\n    }\n    \n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            sortedMbtiTypes: MbtiTypes.getSortedTypesByCognitiveFunctions([props.config.sortByCognitiveFunction]),\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (JSON.stringify(nextProps.config) !== JSON.stringify(this.props.config)) {\n            this.setState({\n                sortedMbtiTypes: MbtiTypes.getSortedTypesByCognitiveFunctions([nextProps.config.sortByCognitiveFunction]).filter(type => this.isToggled(type, nextProps.config.filter, nextProps.config.filterByPersonalitySystem)),\n            });\n        }\n    }\n\n    /**\n     * @param {String} type The MBTI type\n     * @param {String} typeFilter The type filter that toggles which MBTI types to show; for example \"IJ\" or \"INFJ,EST\"\n     * @param {String} filterByPersonalitySystem The personality system to filter by; for example \"mbti\", \"socionics\", \"socionics-formal\"\n     * @return {Boolean} Whether the provided MBTI type is toggled to be shown within the user interface via the application's type filter\n     */\n    isToggled(type, typeFilter, filterByPersonalitySystem) {\n        if (typeFilter.indexOf(',') !== -1) {\n            // If the type filter is a union of multiple type filters, iterate through each type filter\n            var typeFilters = typeFilter.split(',');\n            for (var i = 0; i < typeFilters.length; i++) {\n                // If the provided type matches against any of the provided type filters, the provided type is toggled to be shown\n                if (this.isToggled(type, typeFilters[i], filterByPersonalitySystem)) {\n                    return true;\n                }\n            }\n\n            // If none of the provided type filters match the provided type, the type is not toggled to be shown\n            return false;\n        }\n        else {\n            if (filterByPersonalitySystem == 'socionics-formal') {\n                var socionicsFormalName = socionicsMap[type][1];\n                // console.log('socionicsName ==', socionicsName);\n                if (socionicsFormalName.indexOf(typeFilter) !== 0) {\n                    return false;\n                }\n            }\n            else {\n                var typeToMatch = filterByPersonalitySystem == 'socionics'\n                    ? socionicsMap[type][0]\n                    : type;\n                    \n                // If a letter within the provided type filter does not match the provided type, the type is not toggled to be shown\n                for (var i = 0; i < typeFilter.length; i++) {\n                    var typeFilterLetter = typeFilter[i];\n                    if (typeToMatch.indexOf(typeFilterLetter) === -1) {\n                        return false;\n                    }\n                }\n            }\n            \n            // Otherwise, the type is toggled to be shown\n            return true;\n        }\n    }\n    \n    /**\n     * @param {String} type The MBTI type\n     * @return {String} The HTML of a container describing the provided MBTI type\n     */\n    getTypeContainerHtml(type) {\n        var cognitiveFunctions = MbtiTypes.getTypeData(type),\n            socionicsName = socionicsMap[type][0],\n            socionicsFormalName = socionicsMap[type][1],\n            {\n                actions,\n                displayOptions,\n                config,\n            } = this.props;\n        return (\n            <div\n                key={type}\n                className={'typeContainer typeContainer_' + type}\n            >\n                <div className=\"typeLabel\">\n                    <span className=\"type-label-mbti\">{type}</span>\n                    <span className=\"type-label-socionics\">{socionicsName}</span>\n                    <span className=\"type-label-socionics-formal\">{socionicsFormalName}</span>\n                </div>\n                {displayOptions.features.includes('eeg')\n                    ? (<div className=\"typeEeg\"><img src={'img/eeg/' + type + '.png'} /></div>)\n                    : ''\n                }\n                {displayOptions.features.includes('cognitiveFunctions') ? cognitiveFunctions.map((cognitiveFunction, cognitiveFunctionIndex) => {\n                    var socionicsFunction = mbtiToSocionics[cognitiveFunction],\n                        cognitiveFunctionName = cognitiveFunctionNames[cognitiveFunction];\n                    \n                    return (\n                        <div\n                            className={classnames('cognitiveFunction tier' + (cognitiveFunctionIndex + 1), {\n                                'sortPriority1': config.sortByCognitiveFunction == cognitiveFunction\n                            })}\n                            key={cognitiveFunction}\n                            onClick={() => actions.sortByCognitiveFunction(cognitiveFunction)}\n                        >\n                            <div className={'socionics-icon icon-' + cognitiveFunction} title={socionicsFunction}></div>\n                            <div className='mbti-function' title={cognitiveFunctionName}>{cognitiveFunction}</div>\n                            {/*<div className=\"socionics-function\">{socionicsFunction}</div>*/}\n                        </div>\n                    );\n                }) : ''}\n                {displayOptions.features.includes('temperament') ? this.getTemperamentHtml(type) : ''}\n            </div>\n        );\n    }\n    \n    getTemperamentHtml(mbtiType) {\n        var temperament = ['SP', 'SJ', 'NF', 'NT'].filter(temperament => mbtiType.includes(temperament[0]) && mbtiType.includes(temperament[1]))[0];\n        \n        var temperamentsData = {\n            'language': {\n                'display': 'Language',\n                'headers': ['Language Style', 'Referential', 'Syntactical', 'Rhetorical'],\n                'SP': ['Harmonic', 'Indicative', 'Descriptive', 'Heterodox'],\n                'SJ': ['Associative', 'Imperative', 'Comparative', 'Orthodox'],\n                'NF': ['Inductive', 'Interpretive', 'Metaphoric', 'Hyperbolic'],\n                'NT': ['Deductive', 'Categorical', 'Subjunctive', 'Technical']\n            },\n            'intellect': { // TODO: Incorporate the \"Directive/Informative\" and \"Expressive/Reserved\" traits! (page 195 of Please Understand Me II)\n                'SP': ['Tactical'],\n                'SJ': ['Logistical'],\n                'NF': ['Diplomatic'],\n                'NT': ['Strategic']\n            },\n            'interest': {\n                'display': 'Interest',\n                'headers': ['Education', 'Preoccupation', 'Vocation'],\n                'SP': ['Artcraft', 'Technique', 'Equipment'],\n                'SJ': ['Commerce', 'Morality', 'Materiel'],\n                'NF': ['Humanities', 'Morale', 'Personnel'],\n                'NT': ['Sciences', 'Technology', 'Systems']\n            },\n            'orientation': {\n                'display': 'Orientation',\n                'headers': ['Present', 'Future', 'Past', 'Place', 'Time'],\n                'SP': ['Hedonism', 'Optimism', 'Cynicism', 'Here', 'Now'],\n                'SJ': ['Stoicism', 'Pessimism', 'Fatalism', 'Gateways', 'Yesterday'],\n                'NF': ['Altruism', 'Credulism', 'Mysticism', 'Pathways', 'Tomorrow'],\n                'NT': ['Pragmatism', 'Skepticism', 'Relativism', 'Intersections', 'Intervals']\n            },\n            'self-image': {\n                'display': 'Self-Image',\n                'headers': ['Self-Esteem', 'Self-Respect', 'Self-Confidence'],\n                'SP': ['Artistic', 'Audacious', 'Adaptable'],\n                'SJ': ['Dependable', 'Beneficient', 'Respectable'],\n                'NF': ['Empathic', 'Benevolent', 'Authentic'],\n                'NT': ['Ingenious', 'Autonomous', 'Resolute']\n            },\n            'value': {\n                'display': 'Value',\n                'headers': ['Being', 'Trusting', 'Yearning', 'Seeking', 'Prizing', 'Aspiring'],\n                'SP': ['Excited', 'Impulse', 'Impact', 'Stimulation', 'Generosity', 'Virtuoso'],\n                'SJ': ['Concerned', 'Authority', 'Belonging', 'Security', 'Gratitude', 'Executive'],\n                'NF': ['Enthusiastic', 'Intuition', 'Romance', 'Identity', 'Recognition', 'Sage'],\n                'NT': ['Calm', 'Reason', 'Achievement', 'Knowledge', 'Deference', 'Wizard']\n            },\n            'social-role': {\n                'display': 'Social Role',\n                'headers': ['Mating', 'Parenting', 'Leading'],\n                'SP': ['Playmate', 'Liberator', 'Negotiator'],\n                'SJ': ['Helpmate', 'Socializer', 'Stabilizer'],\n                'NF': ['Soulmate', 'Harmonizer', 'Catalyst'],\n                'NT': ['Mindmate', 'Individuator', 'Visionary']\n            }\n        };\n        \n        var temperamentLabels = {\n            'SP': 'Artisan',\n            'SJ': 'Guardian',\n            'NF': 'Idealist',\n            'NT': 'Rational'\n        };\n        \n        function getSectionHtml(section) {\n            var sectionData = temperamentsData[section],\n                sectionHeaders = sectionData['headers'],\n                temperamentData = sectionData[temperament];\n            \n            // console.log('sectionHeaders = ', sectionHeaders, '; temperamentData = ', temperamentData);\n            \n            return (\n                <div key={section} className=\"temperament-section\">\n                    <div className=\"temperament-section-label\">{sectionData['display']}</div>\n                    <div className={'temperament-section-values temperament-section-values--' + section}>\n                        {temperamentData.map((value, index) => (\n                            <span key={index} className=\"section-temperament-value\" title={sectionHeaders[index]}>{value}</span>\n                        ))}\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className={'temperament temperament-' + temperament}>\n                <div className={'temperament-label temperament-label-' + temperament}>{temperamentLabels[temperament]}</div>\n                <div className=\"temperament-sections\">\n                    {['language', 'interest', 'orientation', 'self-image', 'value', 'social-role'].map(section => getSectionHtml(section))}\n                </div>\n            </div>\n        );\n    }\n    \n    render() {\n        return (\n            <div className={'mbti-app-types-container personality-list searching-' + this.props.config.filterByPersonalitySystem}>\n                {this.state.sortedMbtiTypes.map(mbtiType => this.getTypeContainerHtml(mbtiType))}\n            </div>\n        )\n    }\n})","\nexport const showFeatures = features => ({\n    type: 'SHOW_FEATURES',\n    features,\n});","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { bindActionCreators, compose } from 'redux';\nimport { connect } from 'react-redux';\nimport * as configActions from '../actions/config';\nimport * as displayOptionsActions from '../actions/displayOptions';\n\nimport '../style/pretty-checkbox.min.css';\n\nexport default connect(state => ({\n    config: state.config,\n    displayOptions: state.displayOptions,\n}), dispatch => ({\n    configActions: bindActionCreators(configActions, dispatch),\n    displayOptionsActions: bindActionCreators(displayOptionsActions, dispatch),\n}))(class MyComponent extends Component {\n    static propTypes = {\n        configActions: PropTypes.object.isRequired,\n        config: PropTypes.object.isRequired,\n    }\n    \n    constructor(props) {\n        super(props);\n        \n        this.options = [\n            ['EEG', React.createRef(), 'eeg'],\n            ['Cognitive Functions', React.createRef(), 'cognitiveFunctions'],\n            ['Temperament', React.createRef(), 'temperament'],\n        ];\n    }\n    \n    onChange() {\n        let features = [];\n        this.options.forEach(([featureLabel, featureRef, featureId]) => {\n            if (featureRef.current.checked) {\n                features.push(featureId);\n            }\n        });\n        this.props.displayOptionsActions.showFeatures(features);\n    }\n    \n    render() {\n        const {\n            displayOptions,\n        } = this.props;\n        \n        return (\n            <div className='features'>\n                {this.options.map(([featureLabel, featureRef, featureId]) => (\n                    <div key={featureLabel} className=\"pretty p-default\">\n                        <input type=\"checkbox\" ref={featureRef} onClick={this.onChange.bind(this)} defaultChecked={displayOptions.features.includes(featureId) ? 'checked' : ''} />\n                        <div className=\"state\">\n                            <label>{featureLabel}</label>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n});","const originalState = {\n    sortByCognitiveFunction: null,\n    \n    /**\n     * Recognized enums: 'mbti', 'socionics', 'socionics-formal'\n     */\n    filterByPersonalitySystem: 'mbti',\n    \n    /**\n     * The filter for only specific personality types (or '' for no filter)\n     */\n    filter: '',\n};\n\nexport default (state = originalState, action) => {\n  switch (action.type) {\n    case 'SORT_BY_COGNITIVE_FUNCTION':\n      console.log('action.cognitiveFunction !== state.cognitiveFunction ==', action.cognitiveFunction !== state.cognitiveFunction);\n      console.log('state ==', state);\n      console.log('action ==', action);\n        \n      return Object.assign({}, state, {\n          sortByCognitiveFunction: action.cognitiveFunction !== state.sortByCognitiveFunction\n              ? action.cognitiveFunction\n              : null,\n      });\n    case 'FILTER_BY_PERSONALITY_SYSTEM':\n        return Object.assign({}, state, {\n            filterByPersonalitySystem: action.system,\n        });\n    case 'FILTER_PERSONALITIES':\n        return Object.assign({}, state, {\n            filter: action.filter,\n        });\n    default:\n      return state\n  }\n};\n","const originalState = {\n    features: ['eeg', 'cognitiveFunctions', 'temperament'],\n};\n\nexport default (state = originalState, action) => {\n  switch (action.type) {\n    case 'SHOW_FEATURES':\n      return Object.assign({}, state, {\n          features: action.features,\n      });\n    default:\n      return state\n  }\n};\n","import { combineReducers } from 'redux'\nimport config from './config'\nimport displayOptions from './displayOptions'\n\nexport default combineReducers({\n  config,\n  displayOptions,\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\n\nimport thunk from 'redux-thunk';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n//import { routerMiddleware } from 'react-router-redux';\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n","import React from 'react';\nimport PersonalityFilter from './PersonalityFilter';\nimport PersonalityList from './PersonalityList';\nimport DisplayOptions from './DisplayOptions';\n// import Footer from './Footer'\n// import AddTodo from '../containers/AddTodo'\n// import VisibleTodoList from '../containers/VisibleTodoList'\nimport '../style/mbti-flashcards.css';\n\nexport default () => (\n  <div className='personality-flashcards-app'>\n    <DisplayOptions />\n    <PersonalityFilter />\n    <PersonalityList />\n  </div>\n)\n\n"],"sourceRoot":""}